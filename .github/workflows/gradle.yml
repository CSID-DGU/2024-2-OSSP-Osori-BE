name: 아코밍 CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # JAVA_HOME 환경변수 설정
    - name: Set JAVA_HOME
      run: echo "JAVA_HOME=$JAVA_HOME_17_X64" >> $GITHUB_ENV

    # Gradle 캐시 설정
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          build
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-

    # Gradle 설정
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5

    # Build with Gradle Wrapper (테스트 제외)
    - name: Build with Gradle Wrapper
      run: ./gradlew build -x test

    # Docker 이미지 빌드 및 배포
    - name: Docker build & push to Docker hub
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test . && \
        docker push ${{ secrets.DOCKER_USERNAME }}/docker-test

    # Docker 컨테이너 실행
    - name: Deploy Docker container
      run: |
        sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
        CONTAINER_ID=$(sudo docker ps -q)
        if [ -n "$CONTAINER_ID" ]; then
          sudo docker stop "$CONTAINER_ID"
        fi
        sudo docker rm $(sudo docker ps --filter 'status=exited' -a -q)
        sudo docker image prune -a -f
        sudo docker run -d --restart unless-stopped --log-driver=syslog -p 8080:8080 \
          -e DB_URL=${{ secrets.DB_URL }} \
          -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
          -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
          -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
          -e SMTP_HOST=${{ secrets.SMTP_HOST }} \
          -e SMTP_PORT=${{ secrets.SMTP_PORT }} \
          -e SMTP_USERNAME=${{ secrets.SMTP_USERNAME }} \
          -e SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }} \
          ${{ secrets.DOCKER_USERNAME }}/docker-test:latest

